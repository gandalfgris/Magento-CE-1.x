/** \mainpage Antidot PHP API documentation
 *
 * \tableofcontents
 *
 * \section introduction Introduction
 *
 * The Antidot AFS and BO products are modular, open, and flexible solutions.
 * They rely on web services developed in compliance with the web standards.
 *
 * Here is the documentation of the Antidot PHP API which will help you
 * integrate Antidot products in your own solution.
 *
 * A short presentation of each API module is presented and links are provided
 * to detailled informations. Some of the examples provided rely on external
 * libraries which should be downloaded if you want to test them.
 *
 * Most of the Antidot PHP API should work properly with PHP starting at version
 * 5.1. Some specific APIs will only work with more recent version of PHP but
 * version 5.3 is the maximum required version.
 *
 *
 * \section afs_search_introduction AFS search API
 *
 * This API allows you to simplify integration of AFS search engine query and
 * reply.
 *
 * It is split in three main functions detailled below. Each of these functions
 * can be used separately but it is highly recommended to combine them to
 * simplify your integration steps.
 *
 *
 * \subsection afs_search_coder_intro AFS search query coder/decoder API
 *
 * This API is optional.
 *
 * It is used to encode and decode queries. Encoded queries can be used as URL
 * parameters. Such URL can be used to access your web site, filtering on
 * various parameters.
 *
 * URLs generated from encoded queries can be easilly decoded to build the
 * original query. This original query is used to produce new queries using
 * previous parameters, adding new ones or removing existing ones.
 *
 * Main classes involved in this feature are:
 * \li @a AfsQueryCoderInterface: interface for the coder/decoder.
 * \li @a AfsQueryCoder: standard implementation of the coder/decoder.
 * \li @a AfsQuery: @em represents a valid AFS query. It only stores query
 * parameters and manages addition or suppression of parameter values.
 *
 * For detailled description and examples of this feature, refer to
 * @ref afs_search_coder.
 *
 *
 * \subsection afs_search_query_intro AFS search query API
 *
 * This API simplifies Antidot search engine queries submission.
 *
 * Main classes involved in this feature are:
 * \li @a AfsSearchConnector: @em configures AFS search engine connection and
 * @em sends query with specific parameters to AFS search engine.
 * \li @a AfsFacetManager: @em manages all configured facets.
 * \li @a AfsQuery: @em represents a valid AFS query. It only stores query
 * parameters and manages addition or suppression of parameter values.
 * \li @a AfsSearchQueryManager: @em combines instances of all previous classes
 * to send appropriate query to AFS search engine and return a @c json_decoded
 * reply.
 * \li @a AfsSearch: this is a facade for previous classes except AfsQuery.
 *
 * For detailled description of this feature, refer to @ref
 * afs_search_query. If you prefer less details, then choose @ref afs_search
 * instead.
 *
 *
 * \subsection afs_search_reply_intro AFS search reply API
 *
 * Even if result from previous API is JSON decoded, helpers are provided to
 * access most usefull data in simplest way.
 *
 * Main helpers involved in this feature are:
 * \li @a AfsResponseHelper: this is the @em main helper which is initialized
 * from result provided by @a AfsSearchQueryManager. It allows to check whether
 * an error occured and to retrieve helpers for each replyset and spellcheck
 * suggestion.
 * \li @a AfsReplysetHelper: manage all data related to @em one replyset
 * (metadata, facets, replies...).
 * \li @a AfsMetaHelper: simple access to useful metadata.
 * \li @a AfsFacetHelper: simple access to all facets and their values.
 * \li @a AfsReplyHelper: basic access to reply components.
 * \li @a AfsPagerHelper: simple access to pager features.
 *
 * For detailled description and examples of this feature, refer to
 * @ref afs_search_reply.
 *
 *
 * \section afs_paf_introduction PaF API
 *
 * This API allows you to simplify interactions with Antidot PaF. Currently,
 * you can only send one or more documents to an existing PaF. Other
 * functionalities will come soon.
 *
 * \subsection afs_paf_upload_intro Upload data to Antidot PaF
 *
 * One or more documents can be sent to specific PaF in order to be worked on.
 * Main classes involved in this feature are:
 * \li @a AfsDocument: manage a simple document defined by existing file or
 * generated content.
 * \li @a AfsDocumentManager: manage one or mode @a AfsDocument. This is the
 * only mean available to upload multiple documents.
 * \li @a AfsPafConnector: connection manager to upload one or more documents.
 * \li @a AfsPafUploadReply: simple wrapper for upload reply.
 *
 * For detailled description and examples of this feature, refer to @ref
 * afs_paf_upload.
 */

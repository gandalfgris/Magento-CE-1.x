/** \page afs_search_query AFS search query API
 *
 * \tableofcontents
 *
 * \section asq_introduction Introduction
 *
 * This API simplifies querying of Antidot search engine.
 * Classes involved in this API are detailled and, when possible, examples are
 * given.
 *
 * Snippets of code are usable as is and can be joined to build a fully
 * functional example step by step. If you prefer you can get access to full
 * code example \ref full_example.php.
 *
 * If you have not read it yet you can start by reading @ref afs_search_coder.
 *
 *
 * \section asq_connector AFS search connector
 *
 * Instance of @a AfsSearchConnector is initialized with specific search URL and
 * an instance of @a AfsService.
 *
 * Specific search URL is provided by production team and should be similar to
 * <tt>%http://your_company.afs-antidot.net/search</tt>
 *
 * Along with the search URL, a service number and service status should also
 * have been provided. These informations are used to initialized an instance of
 * @a AfsService. Production services are not modified in place so their status
 * are usually @c stable.
 *
 * Here an example to initialize an AFS search connector:
 * @snippet full_example.php Connector
 *
 * Once the connector is initialized, queries can be submitted by calling
 * AfsSearchConnector::send method. This method is generally never called
 * directlty. Instead, call to AfsSearchQueryManager::send (see @ref
 * asq_query_manager) triggers appropriate call to this method.
 *
 * An array of parameters should be provided to the method. Array key/value
 * pairs should correspond to valid AFS search engine parameter names with valid
 * associated value (see
 * <tt>AFS Integration Guide > AFS WEB SERVICES > search > Parameters</tt>).
 * <br/>
 * Provided array of parameters is filled with default parameters such as
 * @c afs:service, @c afs:status and @c afs:output before Antidot search engine
 * is queried.
 *
 *
 * \section asq_facet_manager Facets management
 *
 * Facets can be declared and configured by instantiating @a AfsFacet. The two
 * most important parameters are the facet id and the facet type. These
 * parameters should correspond to the ones provided in the @c feed description
 * file on the PaF side.
 *
 * Each facet should be added to an instance of AfsFacetManager. The order in
 * which facets are added to the manager is highly important because it implies
 * the order in which facets will appear in Antidot search engine reply.
 *
 * Example of facet and facet manager initialization:
 * @snippet full_example.php Facets and Facet manager
 *
 *
 * \section asq_query Query
 *
 * Details on queries are provided in @ref asq_query.
 *
 * Here a summarize of the query usages:
 * - The query object should be initialized with current query: this is done
 * using URL parameters.
 * - New query should be generated for each link in the HTML generated page:
 * each query is generated by modifying current one.
 *
 * Reminder of query initialization:
 * @snippet full_example.php Coder/decoder and Query
 *
 *
 * \section asq_query_manager Query manager
 *
 * Query manager combine all previous elements to connect and send query to
 * Antidot search engine. No specific configuration is necessary.
 *
 * Example of query manager initialization:
 * @snippet full_example.php Query manager
 *
 *
 * \section asq_end Next step
 *
 * @ref afs_search_reply
 */
